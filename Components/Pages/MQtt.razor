@page "/MQtt"
@using SimpleMqtt
@using DependencyInjectionExample.Data
@inject IMqttService MqttService
@inject IDatabaseService DatabaseService
@inject IConfiguration configuration
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>RobotBesturing</PageTitle>

<div class="container-fluid p-4 d-flex justify-content-center">
    <div class="modern-panel shadow-lg">
        <div class="row text-center">
            <div class="col">
                <button class="btn custom-forward" @onclick="SendContinueMessage">doorgaan</button>
                <p class="objectscount">@ObjectCount</p>
                <p class="objectdetected">objects detected</p>
                <button class="btn custom-reset" @onclick="ResetObjectCount">Reset Objects</button>
            </div>
            <div class="col">
                <button class="btn custom-clean" @onclick="SendSchoonmaakMessage">
                    <i class="fas fa-broom"></i> schoonmaak
                </button>
                <p class="meters">@Distance cm</p>
                <p class="afstand">afstand</p>
            </div>
            <div class="col">
                <button class="btn custom-stop" @onclick="SendStopMessage">stop</button>
                <div class="battery mt-3">
                    <div class="battery-icon border">
                        <div class="charge @GetBatteryClass()" style="width: @BatteryWidth%;"></div>
                    </div>
                    <div class="battery-label mt-1">@BatteryPercentage%</div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string BatteryPercentage = "0";
    private string BatteryWidth = "0";
    private int ObjectCount = 0;
    private int Distance = 0;

    protected override async Task OnInitializedAsync()
    {
        MqttService.InitializeClient("2aa2fd");

        await MqttService.SubscribeToTopic("robotbattery");
        await MqttService.SubscribeToTopic("robotobjects");
        await MqttService.SubscribeToTopic("robotdistance");
        await MqttService.SubscribeToTopic("batterymqtt");

        MqttService.OnMessageReceived += HandleBatteryMessage;
        MqttService.OnMessageReceived += HandleObjectsMessage;
        MqttService.OnMessageReceived += HandleDistanceMessage;
    }

    private async Task SendSchoonmaakMessage()
    {
        await MqttService.PublishMessage("schoonmaak", "control");
    }

    private async Task SendContinueMessage()
    {
        await MqttService.PublishMessage("continue", "control");
    }

    private async Task SendStopMessage()
    {
        await MqttService.PublishMessage("stop", "control");
    }

    private async void HandleBatteryMessage(object? sender, SimpleMqttMessage message)
    {
        if (message.Topic == "robotbattery" && int.TryParse(message.Message, out int percentage))
        {
            BatteryPercentage = percentage.ToString();
            BatteryWidth = Math.Clamp(percentage, 0, 100).ToString();
            await DatabaseService.SaveBatteryPercentage(percentage);
            InvokeAsync(StateHasChanged);
        }
    }

    private async void HandleObjectsMessage(object? sender, SimpleMqttMessage message)
    {
        if (message.Topic == "robotobjects" && message.Message == "+1")
        {
            ObjectCount++;
            await DatabaseService.SaveObjectCount(ObjectCount);
            InvokeAsync(StateHasChanged);
        }
    }

    private async void HandleDistanceMessage(object? sender, SimpleMqttMessage message)
    {
        if (message.Topic == "robotdistance" && int.TryParse(message.Message, out int distance))
        {
            Distance = distance;
            await DatabaseService.SaveDistance(distance);
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task ResetObjectCount()
    {
        ObjectCount = 0;
        await DatabaseService.SaveObjectCount(ObjectCount);
        InvokeAsync(StateHasChanged);
    }

    private string GetBatteryClass()
    {
        int percentage = int.Parse(BatteryPercentage);
        if (percentage > 75) return "battery-high";
        if (percentage > 50) return "battery-medium";
        if (percentage > 25) return "battery-low";
        return "battery-critical";
    }

    public void Dispose()
    {
        MqttService.OnMessageReceived -= HandleBatteryMessage;
        MqttService.OnMessageReceived -= HandleObjectsMessage;
        MqttService.OnMessageReceived -= HandleDistanceMessage;
        MqttService.Dispose();
    }
}